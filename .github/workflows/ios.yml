name: Build iOS (Full - Disabled)

# Temporarily disabled - uncomment 'on:' section to enable
# on: push
on:
  workflow_dispatch:  # Only run manually for now

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: sudo xcode-select -s /Applications/Xcode.app
    
    - name: Create Secrets Configuration
      env:
        POLLO_API_KEY: ${{ secrets.POLLO_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      run: |
        cat > DirectorStudio/Configuration/Secrets.local.xcconfig <<EOF
        // Auto-generated secrets from GitHub Actions
        POLLO_API_KEY = ${POLLO_API_KEY}
        POLLO_API_ENDPOINT = https://api.pollo.ai/v1
        DEEPSEEK_API_KEY = ${DEEPSEEK_API_KEY}
        DEEPSEEK_API_ENDPOINT = https://api.deepseek.com/v1
        EOF
    
    - name: Create ExportOptions.plist
      run: |
        cat > ExportOptions.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF
    
    - name: Install Apple Certificate
      if: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
    
    - name: Install Provisioning Profile
      if: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 != '' }}
      env:
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      run: |
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
    - name: Build Archive
      run: |
        xcodebuild -scheme "DirectorStudio" \
          -archivePath $RUNNER_TEMP/DirectorStudio.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          clean archive
    
    - name: Export IPA
      run: |
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/DirectorStudio.xcarchive \
          -exportPath $RUNNER_TEMP/export \
          -exportOptionsPlist ExportOptions.plist
    
    - name: Upload IPA
      uses: actions/upload-artifact@v3
      with:
        name: DirectorStudio.ipa
        path: $RUNNER_TEMP/export/DirectorStudio.ipa
    
    - name: Upload dSYM
      uses: actions/upload-artifact@v3
      with:
        name: DirectorStudio.app.dSYM.zip
        path: $RUNNER_TEMP/export/DirectorStudio.app.dSYM.zip
    
    # Optional: Upload to App Store Connect
    - name: Upload to TestFlight
      if: github.ref == 'refs/heads/main' && secrets.APP_STORE_CONNECT_API_KEY != ''
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        # This requires App Store Connect API key setup
        # xcrun altool --upload-app \
        #   -f $RUNNER_TEMP/export/DirectorStudio.ipa \
        #   -t ios \
        #   --apiKey ${{ secrets.API_KEY_ID }} \
        #   --apiIssuer ${{ secrets.API_ISSUER_ID }}
        echo "IPA ready for manual upload to App Store Connect"